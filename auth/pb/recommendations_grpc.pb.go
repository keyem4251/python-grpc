// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RecommendationsClient is the client API for Recommendations service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendationsClient interface {
	Recommend(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error)
}

type recommendationsClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendationsClient(cc grpc.ClientConnInterface) RecommendationsClient {
	return &recommendationsClient{cc}
}

func (c *recommendationsClient) Recommend(ctx context.Context, in *RecommendationRequest, opts ...grpc.CallOption) (*RecommendationResponse, error) {
	out := new(RecommendationResponse)
	err := c.cc.Invoke(ctx, "/Recommendations/Recommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendationsServer is the server API for Recommendations service.
// All implementations must embed UnimplementedRecommendationsServer
// for forward compatibility
type RecommendationsServer interface {
	Recommend(context.Context, *RecommendationRequest) (*RecommendationResponse, error)
	mustEmbedUnimplementedRecommendationsServer()
}

// UnimplementedRecommendationsServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendationsServer struct {
}

func (UnimplementedRecommendationsServer) Recommend(context.Context, *RecommendationRequest) (*RecommendationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recommend not implemented")
}
func (UnimplementedRecommendationsServer) mustEmbedUnimplementedRecommendationsServer() {}

// UnsafeRecommendationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendationsServer will
// result in compilation errors.
type UnsafeRecommendationsServer interface {
	mustEmbedUnimplementedRecommendationsServer()
}

func RegisterRecommendationsServer(s grpc.ServiceRegistrar, srv RecommendationsServer) {
	s.RegisterService(&Recommendations_ServiceDesc, srv)
}

func _Recommendations_Recommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecommendationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendationsServer).Recommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Recommendations/Recommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendationsServer).Recommend(ctx, req.(*RecommendationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Recommendations_ServiceDesc is the grpc.ServiceDesc for Recommendations service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recommendations_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Recommendations",
	HandlerType: (*RecommendationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recommend",
			Handler:    _Recommendations_Recommend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommendations.proto",
}
